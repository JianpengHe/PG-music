//0xE000	0xF8FF 自行使用區域	Private Use Zone
/**
 * 每个字编码规则:
 * [距离上一个字的时间:number1] [歌词文字:string] [时长:number2]
 *
 * number编码规则：使用0xE000-0xF8FF，减去0xE000后为真实值
 * number1编码规则：使用无限制的字符编码，所有连续的0xE000-0xF8FF都编码同一个数字，使用小端编码(若使用0个字符编码，则代表数字0)
 * number2编码规则：第一个字符小于6000，只使用一个字符编码该数字，即该字符代表真实数字；若6000-6399，则使用2个字符编码该字符，公式：(第一个字符%6000)*6400+第二个字符
 * 若number2大于399*6400，会添加一个空格字符，将多余的时间计入这个空格字符
 */
const zlib = require("zlib");
const str = `[ar:陈奕迅]
[al:273979]
[by:]
[offset:0]
[1944,3329]黑(1944,536)择(2470,242)明(2712,1197) - 陈(3909,237)奕(4146,240)迅(4386,886)
[4786,2844]曲：C.Y. Kong(4786,488)
[12786,2844]他(12786,488)不(13274,168)姓(13442,152)黑(13594,408)不(14002,184)怕(14186,176)黑(14362,486)选(14848,166)了(15014,166)光(15180,450)
[15330,3260]叫(15330,480)最(15810,174)暗(15984,148)黑(16132,170)的(16302,220)戏(16522,186)院(16708,448)发(17156,166)出(17322,156)光(17478,1110)
[18290,1985]临(18290,478)行(18768,194)仍(18962,208)不(19170,200)肯(19370,204)撒(19574,268)手(19842,427)
[19978,5516]拍(19978,904)出(20882,170)一(21052,302)片(21354,376)彩(21730,320)色(22050,1060)给(23110,561)仰(23671,200)望(23871,1619)
[25194,2847]他(25194,473)很(25667,189)有(25856,206)心(26062,400)很(26462,168)会(26630,210)讲(26840,398)黑(27238,170)暗(27408,202)中(27610,430)
[27741,3363]老(27741,467)百(28208,206)姓(28414,188)怎(28602,188)么(28790,188)发(28978,188)出(29166,428)热(29594,162)与(29756,186)汗(29942,1160)
[30804,2094]人(30804,470)又(31274,203)有(31477,217)几(31694,208)多(31902,200)怕(32102,188)光(32290,607)
[32568,4888]要(32568,760)急(33328,176)于(33504,169)往(33673,171)花(33844,332)瓣(34176,380)下(34556,1154)被(35710,174)探(35884,244)望(36128,1320)
[37156,1876]未(37156,472)够(37628,224)色(37852,416)便(38268,174)要(38442,199)腥(38641,386)
[38732,1780]若(38732,464)有(39196,188)日(39384,203)你(39587,179)也(39766,204)开(39970,180)镜(40150,357)
[40212,3440]愿(40212,471)对(40683,169)白(40852,189)不(41041,407)要(41448,177)认(41625,363)你(41988,393)命(42381,1268)
[43352,1776]别(43352,464)要(43816,200)惊(44016,367)别(44383,173)要(44556,200)惊(44756,366)
[44828,1836]乱(44828,468)世(45296,208)下(45504,212)布(45716,176)满(45892,200)樽(46092,204)颈(46296,367)
[46364,5084]这(46364,482)都(46846,195)市(47041,222)已(47263,417)吃(47680,168)够(47848,384)血(48232,399)腥(48631,2808)
[51148,4293]情(51148,466)绪(51614,181)或(51795,209)高(52004,351)或(52355,177)低(52532,488)如(53020,432)此(53452,252)诡(53704,352)秘(54056,1380)
[55141,3013]阴(55141,475)晴(55616,245)难(55861,179)讲(56040,420)理(56460,1685)
[57854,3801]既(57854,690)然(58544,207)浮(58751,564)生(59315,412)就(59727,242)如(59969,334)游(60303,404)戏(60707,948)
[61355,2569]不(61355,477)如(61832,237)坐(62069,182)战(62251,384)机(62635,1285)
[63624,4338]黑(63624,471)暗(64095,189)下(64284,203)磊(64487,356)落(64843,176)光(65019,567)明(65586,377)中(65963,212)演(66175,348)你(66523,1430)
[67662,2965]心(67662,465)能(68127,208)随(68335,194)心(68529,455)拣(68984,627)戏(69611,1016)
[70327,3833]这(70327,682)时(71009,191)期(71200,591)演(71791,388)伤(72179,261)心(72440,329)戏(72769,1387)
[73860,15578]戏(73860,473)烂(74333,234)人(74567,175)未(74742,373)死(75115,14315)
[89138,2741]失(89138,445)恋(89583,175)也(89758,181)死(89939,424)走(90363,162)去(90525,194)死(90719,360)走(91079,164)去(91243,206)死(91449,430)
[91579,3432]你(91579,474)母(92053,186)亲(92239,188)伤(92427,180)心(92607,188)到(92795,252)死(93047,442)内(93489,166)疚(93655,201)未(93856,1150)
[94711,1868]谁(94711,464)人(95175,204)逃(95379,188)不(95567,184)出(95751,202)债(95953,175)主(96128,447)
[96279,5636]似(96279,884)三(97163,182)岁(97345,406)跳(97751,436)飞(98187,320)机(98507,1144)悲(99651,413)够(100064,223)未(100287,1619)
[101615,2700]抑(101615,458)郁(102073,165)也(102238,181)死(102419,379)想(102798,153)去(102951,191)死(103142,424)想(103566,139)去(103705,213)死(103918,390)
[104015,3452]你(104015,490)当(104505,193)你(104698,205)医(104903,184)生(105087,211)已(105298,184)死(105482,492)没(105974,161)见(106135,198)地(106333,1130)
[107167,1919]忘(107167,491)掉(107658,173)了(107831,215)双(108046,185)星(108231,188)报(108419,192)喜(108611,467)
[108786,4948]把(108786,861)天(109647,175)井(109822,181)当(110003,207)凄(110210,338)美(110548,403)地(110951,1331)煽(112282,188)未(112470,1259)
[113434,1850]未(113434,478)够(113912,186)色(114098,412)便(114510,176)要(114686,196)腥(114882,396)
[114984,1828]若(114984,480)有(115464,194)日(115658,184)你(115842,184)也(116026,176)开(116202,208)镜(116410,397)
[116512,3520]愿(116512,468)对(116980,190)白(117170,208)不(117378,404)要(117782,179)认(117961,381)你(118342,388)命(118730,1298)
[119732,1774]别(119732,474)要(120206,182)惊(120388,350)别(120738,180)要(120918,219)惊(121137,366)
[121206,1832]乱(121206,484)世(121690,214)下(121904,194)布(122098,217)满(122315,147)樽(122462,184)颈(122646,387)
[122738,5008]这(122738,479)都(123217,181)市(123398,244)已(123642,402)吃(124044,160)够(124204,474)血(124678,342)腥(125020,2718)
[127446,4344]情(127446,492)绪(127938,185)或(128123,191)高(128314,404)或(128718,170)低(128888,582)如(129470,370)此(129840,174)诡(130014,408)秘(130422,1360)
[131490,2976]阴(131490,468)晴(131958,228)难(132186,176)讲(132362,464)理(132826,1635)
[134166,3820]既(134166,772)然(134938,186)浮(135124,606)生(135730,396)就(136126,170)如(136296,329)游(136625,397)戏(137022,958)
[137686,2616]不(137686,516)如(138202,176)坐(138378,187)战(138565,465)机(139030,1265)
[140002,4274]黑(140002,466)暗(140468,190)下(140658,180)磊(140838,368)落(141206,174)光(141380,582)明(141962,376)中(142338,160)演(142498,378)你(142876,1400)
[143976,3052]心(143976,470)能(144446,222)随(144668,186)心(144854,504)拣(145358,710)戏(146068,956)
[146728,3808]这(146728,634)时(147362,176)期(147538,649)演(148187,403)伤(148590,159)心(148749,409)戏(149158,1377)
[150139,3128]戏(150139,471)烂(150610,193)人(150803,201)未(151004,398)死(151402,1865)
[180447,4216]谁(180447,462)也(180909,174)在(181083,136)畅(181219,331)读(181550,170)死(181720,612)亡(182332,390)的(182722,156)笔(182878,372)记(183250,1410)
[184363,3043]不(184363,475)如(184838,205)来(185043,176)推(185219,643)推(185862,426)理(186288,1116)
[187106,3696]要(187106,658)求(187764,187)存(187951,688)似(188639,351)电(188990,172)玩(189162,368)游(189530,364)戏(189894,908)
[190502,1433]操(190502,503)练(191005,183)着(191188,190)战(191378,199)机(191577,355)
[192780,4310]死(192780,479)也(193259,191)未(193450,176)怕(193626,393)又(194019,161)怕(194180,554)什(194734,420)么(195154,184)苦(195338,360)戏(195698,1390)
[196790,3068]不(196790,498)如(197288,210)重(197498,172)温(197670,418)好(198088,795)戏(198883,966)
[199558,3827]死(199558,684)亡(200242,164)迟(200406,636)早(201042,352)都(201394,188)找(201582,416)你(201998,1387)
[203123,69795]切(203123,492)勿(203615,180)凭(203795,188)自己(203983,1300)(272918,200)`;

const encode = (() => {
  const checkNowTime = (out) => {
    let nowRealTime = 0;
    let useCheck = false;
    return out.every(({ start, nowTime, end, ch }, i) => {
      if (start < 0 || end < 0) {
        console.log(out[i]);
        return false;
      }
      nowRealTime += start;
      if (useCheck && nowRealTime !== nowTime) {
        console.log(
          out.slice(i - 1, i + 2),
          "nowRealTime",
          nowRealTime,
          "nowTime",
          nowTime
        );
        return false;
      }
      useCheck = false;
      // out[i].RealTime = nowRealTime === nowTime;
      nowRealTime += end;
      if (ch === "\n") {
        useCheck = true;
      }
      return true;
    });
  };
  const fix = (bug_item, fix_item, pos) => {
    let jian = 0;
    if (bug_item[pos] >= 0) {
      return true;
    }
    if (fix_item.end > 0) {
      jian = Math.min(
        fix_item.end - (fix_item.ch === "\n" ? 0 : 150),
        -bug_item[pos]
      );
      fix_item.end -= jian;
      bug_item[pos] += jian;
      // bug_item.nowTime -= jian;
      if (bug_item[pos] >= 0) {
        return true;
      }
    }
    if (fix_item.start > 0) {
      jian = Math.min(fix_item.start, -bug_item[pos]);
      fix_item.start -= jian;
      bug_item[pos] += jian;
      bug_item.nowTime -= jian;
      if (bug_item[pos] >= 0) {
        return true;
      }
    }
    return false;
  };
  const encodeNumber = (out) =>
    out
      .map(({ start, ch, end }) => {
        let str = "";
        if (start !== 0) {
          do {
            const n = start % 6400;
            start -= n;
            start /= 6400;
            str += String.fromCharCode(n + 0xe000);
          } while (start >= 1);
        }
        str += ch;
        if (end <= 6000) {
          str += String.fromCharCode(end + 0xe000);
        } else {
          str +=
            String.fromCharCode(((end / 6400) | 0) + 6000 + 0xe000) +
            String.fromCharCode((end % 6400) + 0xe000);
        }
        return str;
      })
      .join("");
  return (str) => {
    const out = [];
    let nowTime = 0;
    for (const [, line_start, line_duration, line] of str
      .split("\n")
      .map((line) => line.trim().match(/^\[(\d+),(\d+)\](.*)$/))
      .filter((a) => a)) {
      let ch_duration_sum = 0;
      if (out.length) {
        out[out.length - 1].end = -nowTime + (nowTime = Number(line_start));
      }
      for (const [, ch, ch_start, ch_duration] of line.matchAll(
        /(.+?)\((\d+),(\d+)\)/g
      )) {
        out.push({
          start: -nowTime + (nowTime = Number(ch_start)),
          nowTime,
          ch: String(ch).replace(/[\ue000-\uf8ff]/g, " "),
          end: Number(ch_duration),
        });
        nowTime += Number(ch_duration);
        ch_duration_sum += Number(ch_duration);
      }
      const start = Math.max(0, ch_duration_sum - Number(line_duration));
      nowTime += start;
      out.push({ start, nowTime, ch: "\n", end: 0 });
    }
    out.splice(-1, 1);
    /** 修复end是负数 */
    /** 上一行\n的索引 */
    let lastLineIndex = -1;
    out.forEach((item, i) => {
      let index = i;
      if (item.end < 0 || item.start < 0) {
        while (1) {
          if (
            fix(item, out[index--], "end") &&
            fix(item, out[index], "start")
          ) {
            break;
          }
          if (index <= lastLineIndex) {
            throw new Error("修复修到上一行了！！！");
          }
        }
      }
      if (item.ch === "\n") {
        lastLineIndex = i;
      }
    });
    /** 检查是否大于399*6400 */
    for (let i = 0; i < out.length; i++) {
      const item = out[i];
      if (item.end > 2553600) {
        out.splice(i + 1, 0, {
          start: item.end - 2553600,
          nowTime: item.nowTime + item.end,
          ch: " ",
          end: 0,
        });
        item.end = 2553600;
      }
    }

    if (!checkNowTime(out)) {
      throw new Error("checkNowTime 出错");
    }
    // console.log(out);
    out.forEach((a) => console.log(a));
    return encodeNumber(out);

    //console.log(out);
  };
})();

const decode = (() => {
  const readStartNumber = function (str) {
    return Array.from(str)
      .reverse()
      .reduce(function (n, ch) {
        return n * 6400 + (ch.charCodeAt(0) - 0xe000);
      }, 0);
  };
  return function (enc) {
    var start_pos;
    var nowTime = 0;
    return Array.from(
      enc.matchAll(/([^\ue000-\uf8ff]+)([\ue000-\uf8ff]+)/g)
    ).map(function (res) {
      if (start_pos === undefined) {
        start_pos = readStartNumber(enc.substring(0, res.index));
      }
      var obj = {
        start: start_pos,
        nowTime: (nowTime += start_pos),
        ch: res[1],
        end: res[2][0].charCodeAt(0) - 0xe000,
      };
      if (obj.end < 6000) {
        start_pos = readStartNumber(res[2].substring(1));
      } else {
        obj.end = (obj.end % 6000) * 6400 + res[2][1].charCodeAt(0) - 0xe000;
        start_pos = readStartNumber(res[2].substring(2));
      }
      nowTime += obj.end;
      return obj;
    });
  };
})();

const go = (d) => {
  const t = encode(d);
  console.log(
    // zlib.deflateSync(Buffer.from(d)).length,
    Buffer.from(t).length
    // zlib.deflateSync(Buffer.from(t)).length,
    // zlib.deflateSync(Buffer.from(t.replace(/[\ue000-\uf8ff]/g, ""))).length
    // t.match(/([^\ue000-\uf8ff]+?)([\ue000-\uf8ff]+?)/g),
    // t.replace(/[\ue000-\uf8ff]/g, "")
  );
  const out = decode(t);
  out.forEach((a) => console.log(a));
  // console.log();
};
if (process.argv[1].includes("convert")) {
  const song_id = process.argv[2];
  if (song_id) {
    require(__dirname + "/online")
      .getLyricOnline(Number(song_id))
      .then(go);
  } else {
    go(str);
  }
}
module.exports = { encode, decode };
// console.log(
//   Buffer.from(String.fromCharCode(0xe000)),
//   Buffer.from(String.fromCharCode(0xf8ff)),
//   Buffer.from("发")
// );
